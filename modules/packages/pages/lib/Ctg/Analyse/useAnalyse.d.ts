import { MutableRefObject } from 'react';
import { FormInstance } from 'antd/lib/form';
import { Suit } from '@lianmed/lmg/lib/Ctg/Suit';
import { AnalyseType } from '@lianmed/lmg/lib/interface';
import { ctg_exams_analyse_score } from '@lianmed/f_types/lib/obvue/ctg_exams_analyse';
export declare const MARKS: AnalyseType[];
declare const _default: (suit: MutableRefObject<Promise<Suit>>, docid: string, fetal: any, ctgData: {
    fhr1?: string;
    fhr2?: string;
    fhr3?: string;
    toco?: string;
    fm?: string;
    docid?: string;
    fetalnum?: string;
    fetalposition?: any;
    _fhr1?: string;
    _fhr2?: string;
    _fhr3?: string;
    selectBarHidden?: boolean;
}) => {
    setMark(m: AnalyseType): void;
    mark: any;
    reAnalyse: () => void;
    startTime: number;
    endTime: number;
    setStartTime: import("react").Dispatch<import("react").SetStateAction<number>>;
    interval: any;
    setInterval(i: any): void;
    mapFormToMark: {
        Fischer_ref: MutableRefObject<FormInstance>;
        Krebs_ref: MutableRefObject<FormInstance>;
        Nst_ref: MutableRefObject<FormInstance>;
        Cst_ref: MutableRefObject<FormInstance>;
        Cstoct_ref: MutableRefObject<FormInstance>;
        Sogc_ref: MutableRefObject<FormInstance>;
        analysis_ref: MutableRefObject<FormInstance>;
    };
    analysis_ref: MutableRefObject<FormInstance>;
    old_ref: MutableRefObject<{
        [x: string]: any;
    }>;
    analyseLoading: boolean;
    setAutoFm(flag: boolean): void;
    autoFm: boolean;
    initData: {
        analysis?: {
            length?: number;
            bhr?: number;
            ltv?: number;
            stv?: number;
            edtimes?: number;
            ldtimes?: number;
            vdtimes?: number;
            acc?: import("@lianmed/f_types/lib/obvue/ctg_exams_analyse").AccPoint[];
            dec?: import("@lianmed/f_types/lib/obvue/ctg_exams_analyse").DecPoint[];
            fm?: number[];
            fhrbaselineMinute?: number[];
            ucdata?: {
                ucIndex: number[];
                uctimes: number;
                ucStrong: number;
                uckeeptime: number;
                ucdurationtime: number;
            };
            start?: number;
            end?: number;
            sinusoid?: boolean;
            _fhr_uptime: number;
            _acc_num: number;
            _dec_num: number;
            _baseline_avg: number;
        };
        score?: ctg_exams_analyse_score;
    };
    autoAnalyse: boolean;
    setAutoAnalyse(s: boolean): void;
    showBase: boolean;
    setShowBase(s: boolean): void;
    setFetalCb(): void;
    fakeHistoryLoading: boolean;
    setCurrentHistory(i: import("./data").Partial<import("./data")._historyItem>): void;
    historyList: import("./data").Partial<import("./data")._historyItem>[];
    currentHistory: import("./data").Partial<import("./data")._historyItem>;
    isEditBase: boolean;
    setIsEditBase(flag: boolean): void;
    fetchHistoryList: () => void;
};
export default _default;
