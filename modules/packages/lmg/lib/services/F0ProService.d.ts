import { Observable } from 'rxjs';
import { EventEmitter } from "@lianmed/utils";
import { ICache } from './types';
import { WsService } from "./WsService";
export declare class F0ProService extends EventEmitter {
    static s: F0ProService;
    datacache: ICache;
    wsService: WsService;
    private connection;
    private rxSubscriber;
    private _connectedResolve;
    get connectedResolve(): (value: ICache) => any;
    set connectedResolve(value: (value: ICache) => any);
    private rxObservable;
    private e;
    private url;
    config(url: string): void;
    constructor(ws: WsService);
    fackData(): void;
    createConnection: () => Promise<any>;
    createListener: () => Observable<unknown>;
    connect: () => void;
    setcur(id: any, value: any): void;
    getdata(id: any): void;
    init(size: any): void;
    batchupdate(): void;
    updatebuttonstatus(name: any, bed_no: any, status: any): void;
    updatedevstatus(bed_no: any, status: any): void;
    enableoperater(bed_no: any, fetal_num: any, enable: any): void;
    alloc(device_no: any, bed_no: any): void;
    cancelalloc(device_no: any, bed_no: any): void;
    modify_volume(device_no: any, bed_no: any, volume: any): void;
    mute_volume(device_no: any, bed_no: any, fetal: any, ismute: any): void;
    subscribe(device_no: any): void;
    start_work(device_no: any, bed_no: any): void;
    zeroing(device_no: any, bed_no: any): void;
    end_work(device_no: any, bed_no: any): void;
    add_fhr(device_no: any, bed_no: any, count: any): void;
    add_toco(device_no: any, bed_no: any): void;
}
